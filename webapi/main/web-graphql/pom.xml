<project>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>sinnet</artifactId>
    <groupId>net.siudek</groupId>
    <version>1.0-SNAPSHOT</version>
    <relativePath>../base-pom/pom.xml</relativePath>
  </parent>

  <groupId>net.siudek</groupId>
  <artifactId>web-graphql</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>web-graphql</name>

  <properties>
    <sonar.coverage.jacoco.xmlReportPaths>${project.basedir}/../${aggregate.report.dir}</sonar.coverage.jacoco.xmlReportPaths>
    <graphql-java-kickstart.version>8.0.0</graphql-java-kickstart.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>net.siudek</groupId>
      <artifactId>domain-api</artifactId>
    </dependency>
    <dependency>
      <groupId>net.siudek</groupId>
      <artifactId>web-security</artifactId>
    </dependency>
    
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-protobuf</artifactId>
      <version>1.33.1</version>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-stub</artifactId>
      <version>1.33.1</version>
    </dependency>

    <dependency>
      <groupId>io.vavr</groupId>
      <artifactId>vavr</artifactId>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>
    <dependency>
        <groupId>io.projectreactor</groupId>
        <artifactId>reactor-core</artifactId>
    </dependency>

    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-core</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <dependency>
      <groupId>com.graphql-java-kickstart</groupId>
      <artifactId>graphql-spring-boot-starter</artifactId>
      <version>${graphql-java-kickstart.version}</version>
    </dependency>

    <!-- to embed Altair tool -->
    <dependency>
        <groupId>com.graphql-java-kickstart</groupId>
        <artifactId>altair-spring-boot-starter</artifactId>
        <version>${graphql-java-kickstart.version}</version>
        <scope>runtime</scope>
    </dependency>

    <!-- to embed GraphiQL tool -->
    <dependency>
        <groupId>com.graphql-java-kickstart</groupId>
        <artifactId>graphiql-spring-boot-starter</artifactId>
        <version>${graphql-java-kickstart.version}</version>
        <scope>runtime</scope>
    </dependency>

    <!-- to embed Voyager tool -->
    <dependency>
        <groupId>com.graphql-java-kickstart</groupId>
        <artifactId>voyager-spring-boot-starter</artifactId>
        <version>${graphql-java-kickstart.version}</version>
        <scope>runtime</scope>
    </dependency>

    <!-- testing facilities -->
    <dependency>
        <groupId>com.graphql-java-kickstart</groupId>
        <artifactId>graphql-spring-boot-starter-test</artifactId>
        <version>${graphql-java-kickstart.version}</version>
        <scope>test</scope>
    </dependency>

  </dependencies>

  <build>

    <resources>
      <resource>
        <!--
          Imports GQL schema contract.
          GraphQL schema files is located outside the project because it is shared with api consumers.
          In the same time schema has to be imported to resources because having schema in resources is required
          by java graphql kickstart dependency.
         -->
        <directory>../../api.graphql/</directory>
      </resource>
    </resources>

    <!-- https://grpc.io/docs/languages/java/generated-code/#codegen -->
    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>1.4.1.Final</version>
      </extension>
    </extensions>

    <plugins>

      <!-- https://grpc.io/docs/languages/java/generated\-code/#codegen -->
      <plugin>
        <groupId>org.xolstice.maven.plugins</groupId>
        <artifactId>protobuf-maven-plugin</artifactId>
        <version>0.6.1</version>
        <configuration>
          <protocArtifact>com.google.protobuf:protoc:3.3.0:exe:${os.detected.classifier}</protocArtifact>
          <pluginId>grpc-java</pluginId>
          <pluginArtifact>io.grpc:protoc-gen-grpc-java:1.4.0:exe:${os.detected.classifier}</pluginArtifact>
          <protoSourceRoot>../../../uservice-reports/main/src/main/proto</protoSourceRoot>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>compile-custom</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      
      <!--
        Special configuration

        GraphQL generates special classes incompatible with Jacoco
        As the result exception is generated as following:
          java.lang.instrument.IllegalClassFormatException:
          Error while instrumenting class 

        Where invalid classes have names finished with *MethodAccess
        Similar case -> see
        https://www.mail-archive.com/notifications@skywalking.apache.org
        /msg00546.html
      -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>*MethodAccess</exclude>
          </excludes>
        </configuration>
      </plugin>

    </plugins>
  </build>
</project>