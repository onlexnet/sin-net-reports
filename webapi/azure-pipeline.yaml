resources:
  - repo: self

variables:
  # connection, defined manually.
  # The connection used in pipeline allows to access to ACR sinnet.azurecr.io
  dockerRegistryServiceConnection: "sinnet-acr"
  # image name (without tags) used to build final image
  imageName: "services-webapi"
  # name of the registry where the image is hosted on.
  # in Docker world, it is also part of image name (prefix)
  containerRegistry: "sinnetapps.azurecr.io"
  
  dockerfilePath: "webapi/build.dockerfile"
  branchTag: "$(Build.SourceBranchName)"

  imageTag: "$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)"


name: $(build.sourceBranch)-$(Date:yyyyMMdd)$(Rev:.rr)

trigger:
  batch: true
  branches:
    include:
      - master
      - release/webapi/*
  paths:
    include:
      - /webapi/

jobs:
  - job: CICD
    displayName: Webapi CI/CD build
    pool:
      vmImage: ubuntu-latest

    variables:
      # We have enabled the build pipelines for Pull Request vs master.
      # There are some differences between a normal build and the build triggered by a PR though:
      # The build triggered from a PR do not push the docker images to any docker registry.
      buildImageOnMaster: $[ eq(variables['build.sourceBranch'], 'refs/heads/master') ]
      buildImageAndPush: $[ startsWith(variables['build.sourceBranch'], 'refs/heads/release/webapi/') ]
      testImageName: build-test-image-$(Build.BuildId)

    steps:
      - task: Maven@3
        
        env:
          # pom.xml uses SONAR_TOKEN env variable to communicate with sonarcloud.
          # The crrent CI/CD pipeline has secret named SONAR_TOKEN with proper value.
          # Problem: Azure pipeline secrets can't be used directly as environment varianbles
          # https://github.com/Microsoft/azure-pipelines-agent/issues/145
          # As the result, we have to put CICD secret to build variable
          SONAR_TOKEN: $(SONAR_TOKEN)

        # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/maven
        displayName: 'Project compilation with Maven'
        inputs:
          mavenPomFile: 'webapi/pom.xml'
          goals: 'verify'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          # options:
          #  - disable log entries (a lot of entries) related to artifacts downloaded by maven
          options: -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
          sonarQubeRunAnalysis: true
          sqMavenPluginVersionChoice: 'latest' # Required when sonarQubeRunAnalysis == True# Options: latest, pom
          checkStyleRunAnalysis: true # We use checkstyle in coding, so let's use it with Maven

      - task: Docker@2
        
        displayName: Push webapi image to docker ACR
        inputs:
          containerRegistry: $(dockerRegistryServiceConnection)
          dockerfile: webapi/build.dockerfile
          repository: webapi
          command: buildAndPush
          tags: $(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
            
