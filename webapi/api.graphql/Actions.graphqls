extend type Mutation {
    Actions(projectId: ID!): ActionsMutation!
}
extend type Query {
    Actions(projectId: ID!): ActionsQuery!
}

type ActionsMutation {
    update(entityId: ID!, entityVersion: Int!, content: ServiceEntry): Boolean!
    remove(entityId: ID!, entityVersion: Int!): Boolean!
    newAction(whenProvided: Date!): SomeEntity!
}

type ActionsQuery {
    get(actionId: ID!): ServiceModel
    search(filter: ServicesFilter): ServicesSearchResult!
}

input ServiceEntry {
    servicemanName: String
    whenProvided: Date!
    customerId: ID
    description: String
    distance: Int
    duration: Int
}

type ServicesSearchResult {
    items: [ServiceModel!]!
    totalDistance: Int!
}

type ServiceModel implements Entity {
    projectId: ID!
    entityId: ID!
    entityVersion: Int!
    customer: CustomerEntity
    servicemanName: String
    whenProvided: Date!
    description: String
    distance: Int
    duration: Int
}

input ServicesFilter {
    from: Date
    to: Date
}

