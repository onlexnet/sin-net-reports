extend type Mutation {
    Services(token: ProjectToken): ServicesOperations!
}

input ServiceEntry {
    servicemanName: String!
    whenProvided: Date!
    forWhatCustomer: String!
    description: String!
    distance: Int!
    duration: Int!
}

type ServicesSearchResult {
    items: [ServiceModel!]!
    totalDistance: Int!
}

type ServiceModel implements Entity {
    entityId: ID!
    entityVersion: Int!
    servicemanName: String!
    whenProvided: Date!
    forWhatCustomer: String!
    description: String!
    distance: Int!
    duration: Int!
}

input ServicesFilter {
    from: Date
    to: Date
}

type ServicesOperations {
    update(entityId: ID!, entityVersion: Int!, content: ServiceEntry): Boolean!
    newAction(whenProvided: Date!): MyEntity!
    search(filter: ServicesFilter): ServicesSearchResult!
    get(actionId: ID!): ServiceModel
}