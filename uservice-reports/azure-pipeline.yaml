resources:
  - repo: self

variables:
  dockerRegistryServiceConnection: "sinnet-acr"
  imageName: "uservice-reports"
  containerRegistry: "sinnetapps.azurecr.io"

trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    include:
      - uservice-reports

jobs:
  - job: CICD
    displayName: Webapi CI/CD build
    pool:
      vmImage: ubuntu-latest

    variables:
      # We have enabled the build pipelines for Pull Request vs master.
      # There are some differences between a normal build and the build triggered by a PR though:
      # The build triggered from a PR do not push the docker images to any docker registry.
      buildImageOnMaster: $[ eq(variables['build.sourceBranch'], 'refs/heads/master') ]
      buildImageAndPush: $[ startsWith(variables['build.sourceBranch'], 'refs/heads/release/webapi/') ]
    
    steps:

      - task: Gradle@2
        inputs:
          displayName: 'Project compilation with Gradle'
          gradleWrapperFile: 'uservice-reports/main/gradlew' 
          cwd: 'uservice-reports/main'
          #options: # Optional
          #tasks: 'build' # A list of tasks separated by spaces, such as 'build test'
          publishJUnitResults: true 
          testResultsFiles: '**/TEST-*.xml' # Required when publishJUnitResults == True
          #testRunTitle: # Optional
          #codeCoverageToolOption: 'None' # Optional. Options: none, cobertura, jaCoCo
          #codeCoverageClassFilesDirectories: 'build/classes/main/' # Required when codeCoverageToolOption == False
          #codeCoverageClassFilter: # Optional. Comma-separated list of filters to include or exclude classes from collecting code coverage. For example: +:com.*,+:org.*,-:my.app*.*
          #codeCoverageFailIfEmpty: false # Optional
          #javaHomeOption: 'JDKVersion' # Options: jDKVersion, path
          jdkVersionOption: '1.11'
          #jdkDirectory: # Required when javaHomeOption == Path
          #jdkArchitectureOption: 'x64' # Optional. Options: x86, x64
          #gradleOptions: '-Xmx1024m' # Optional
          #sonarQubeRunAnalysis: false 
          #sqGradlePluginVersionChoice: 'specify' # Required when sonarQubeRunAnalysis == True# Options: specify, build
          #sonarQubeGradlePluginVersion: '2.6.1' # Required when sonarQubeRunAnalysis == True && SqGradlePluginVersionChoice == Specify
          checkStyleRunAnalysis: false # Optional
          #findBugsRunAnalysis: false # Optional
          #pmdRunAnalysis: false # Optional
      # - task: Maven@3
        
      #   env:
      #   # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/maven
      #   displayName: 'Project compilation with Maven'
      #   inputs:
      #     mavenPomFile: 'webapi/main/pom.xml'
      #     goals: 'verify'
      #     javaHomeOption: 'JDKVersion'
      #     jdkVersionOption: '1.11'
      #     jdkArchitectureOption: 'x64'
      #     publishJUnitResults: false
      #     # options:
      #     #  - disable log entries (a lot of entries) related to artifacts downloaded by maven
      #     options: -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
      #     sonarQubeRunAnalysis: true
      #     sqMavenPluginVersionChoice: 'latest' # Required when sonarQubeRunAnalysis == True# Options: latest, pom
      #     checkStyleRunAnalysis: true # We use checkstyle in coding, so let's use it with Maven as well

      # - task: Docker@2
      #   env:
      #     # to communicate with Azure we need application secret
      #     # and it is delivered as env variable named AZURE_APP_SECRET
      #     AZURE_APP_SECRET: $(AZURE_APP_SECRET)
      #   displayName: Build webapi image
      #   inputs:
      #     command: build
      #     dockerfile: webapi/Dockerfile
      #     containerRegistry: $(dockerRegistryServiceConnection)
      #     repository: webapi
      #     arguments: --build-arg AZURE_APP_SECRET
      #     tags: |
      #       $(Build.SourceBranchName)-$(Build.BuildNumber)

      # - task: Docker@2
      #   displayName: Push webapi image to docker ACR
      #   inputs:
      #     command: push
      #     containerRegistry: $(dockerRegistryServiceConnection)
      #     repository: webapi
      #     tags: |
      #       $(Build.SourceBranchName)-$(Build.BuildNumber)

