type ActionsMutation {
  newAction(
    "ISO-8601"
    whenProvided: Date!
  ): SomeEntity!
  projectId: String
  remove(entityId: ID!, entityVersion: Int!): Boolean!
  update(content: ServiceEntryInput, entityId: ID!, entityVersion: Int!): Boolean!
}

type ActionsQuery {
  get(actionId: ID): ServiceModel
  search(filter: ServiceFilterInput): ServicesSearchResult!
}

type CustomerContact {
  email: String
  firstName: String
  lastName: String
  phoneNo: String
}

type CustomerEntity {
  contacts: [CustomerContact!]!
  data: CustomerModel!
  id: SomeEntity!
  secrets: [CustomerSecret!]!
  secretsEx: [CustomerSecretEx!]!
}

type CustomerModel {
  billingModel: String
  customerAddress: String
  customerCityName: String
  customerName: String!
  daneTechniczne: String
  distance: Int
  komercjaJest: Boolean
  komercjaNotatki: String
  nfzAmbulatoryjnaOpiekaSpecjalistyczna: Boolean
  nfzLekarz: Boolean
  nfzMaFilie: Boolean
  nfzMedycynaSzkolna: Boolean
  nfzNocnaPomocLekarska: Boolean
  nfzNotatki: String
  nfzOpiekaDlugoterminowa: Boolean
  nfzPielegniarkaSrodowiskowa: Boolean
  nfzPolozna: Boolean
  nfzProgramyProfilaktyczne: Boolean
  nfzPsychiatria: Boolean
  nfzRehabilitacja: Boolean
  nfzStomatologia: Boolean
  nfzSzpitalnictwo: Boolean
  nfzTransportSanitarny: Boolean
  nfzUmowa: Boolean
  nfzZaopatrzenieOrtopedyczne: Boolean
  operatorEmail: String
  supportStatus: String
}

type CustomerSecret {
  changedWhen: String!
  changedWho: String!
  location: String!
  password: String
  username: String
}

type CustomerSecretEx {
  changedWhen: String!
  changedWho: String!
  entityCode: String
  entityName: String
  location: String!
  password: String
  username: String
}

type CustomersMutation {
  remove(id: MyEntity!): Boolean
  reserve: SomeEntity!
  save(contacts: [CustomerContactInput!]!, entry: CustomerInput!, id: MyEntity!, secrets: [CustomerSecretInput!]!, secretsEx: [CustomerSecretExInput!]!): SomeEntity
}

type CustomersQuery {
  get(entityId: ID): CustomerEntity
  list: [CustomerEntity!]!
}

"Mutation root"
type Mutation {
  Actions(projectId: ID!): ActionsMutation!
  Customers(projectId: ID!): CustomersMutation!
}

type PrincipalModel {
  name: String
}

type ProjectEntity {
  id: ID!
  name: String!
}

"Query root"
type Query {
  Actions(projectId: ID!): ActionsQuery!
  Customers(projectId: ID!): CustomersQuery!
  Users(projectId: ID!): Users
  availableProjects: [ProjectEntity!]!
  getPrincipal: PrincipalModel!
  test: PrincipalModel!
}

type ServiceModel {
  customer: CustomerEntity
  description: String
  distance: Int
  duration: Int
  entityId: ID!
  entityVersion: Int!
  projectId: ID!
  servicemanName: String
  "ISO-8601"
  whenProvided: Date!
}

type ServicesSearchResult {
  items: [ServiceModel!]!
  totalDistance: Int!
}

type SomeEntity {
  entityId: ID!
  entityVersion: Int!
  projectId: ID!
}

type User {
  email: String!
  entityId: ID!
}

type Users {
  search: [User!]!
}

"Scalar for Date"
scalar Date

input CustomerContactInput {
  email: String
  firstName: String
  lastName: String
  phoneNo: String
}

input CustomerInput {
  billingModel: String
  customerAddress: String
  customerCityName: String
  customerName: String
  daneTechniczne: String
  distance: Int
  komercjaJest: Boolean
  komercjaNotatki: String
  nfzAmbulatoryjnaOpiekaSpecjalistyczna: Boolean
  nfzLekarz: Boolean
  nfzMaFilie: Boolean
  nfzMedycynaSzkolna: Boolean
  nfzNocnaPomocLekarska: Boolean
  nfzNotatki: String
  nfzOpiekaDlugoterminowa: Boolean
  nfzPielegniarkaSrodowiskowa: Boolean
  nfzPolozna: Boolean
  nfzProgramyProfilaktyczne: Boolean
  nfzPsychiatria: Boolean
  nfzRehabilitacja: Boolean
  nfzStomatologia: Boolean
  nfzSzpitalnictwo: Boolean
  nfzTransportSanitarny: Boolean
  nfzUmowa: Boolean
  nfzZaopatrzenieOrtopedyczne: Boolean
  operatorEmail: String
  supportStatus: String
}

input CustomerSecretExInput {
  entityCode: String
  entityName: String
  location: String!
  password: String
  username: String
}

input CustomerSecretInput {
  location: String!
  password: String
  username: String
}

input MyEntity {
  entityId: ID!
  entityVersion: Int!
  projectId: ID!
}

input ServiceEntryInput {
  customerId: ID
  description: String
  distance: Int
  duration: Int
  servicemanName: String
  "ISO-8601"
  whenProvided: Date!
}

input ServiceFilterInput {
  "ISO-8601"
  from: Date
  "ISO-8601"
  to: Date
}
