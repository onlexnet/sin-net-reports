resources:
  - repo: self

variables:
  # well-known connection, defined manually.
  # The connection used in pipeline allows to access to ACR sinnet.azurecr.io
  dockerRegistryServiceConnection: "sinnet-acr"
  # name of the registry where the image is hosted on.
  # in Docker world, it is also part of image name (prefix)
  containerRegistryName: "sinnet.azurecr.io"
  # image name (without tags) used to build final image
  # also root name of the folder in the monorepo
  imageName: uservice-projects
  # Working directore for the uservice
  workingDirectory: ${{ variables.imageName }}

  # https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops#maven
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  dockerCacheName: $(Build.DefinitionName)

trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    include:
      # We have to include all folders where source files are located
      - libs-java
      - api
      - uservice-projects

pr:
  branches:
    include:
      - master
  paths:
    include:
      # We have to include all folders where source files are located
      - libs-java
      - api
      - uservice-projects

jobs:
  - job: CI
    displayName: uService CI build
    pool:
      vmImage: ubuntu-latest
    variables:
      dockerTag0: latest
      dockerTag1: $(Build.SourceBranchName)-$(Build.BuildNumber)

    steps:

      # - task: Cache@2
      #   inputs:
      #     key: 'maven | "$(Agent.OS)" | $(workingDirectory)/**/pom.xml'
      #     restoreKeys: |
      #       maven | "$(Agent.OS)"
      #       maven
      #     path: $(MAVEN_CACHE_FOLDER)
      #   displayName: Cache Maven local repo

      # - task: Cache@2
      #   displayName: Docker cache task
      #   inputs:
      #     key: 'docker | $(Agent.OS) | "$(dockerCacheName)"'
      #     path: $(Pipeline.Workspace)/docker
      #     #Variable to set to 'true' when the cache is restored
      #     cacheHitVar: CACHE_RESTORED

      - script: |
          docker load -i $(Pipeline.Workspace)/docker/cache.tar
        displayName: Restore Docker cache
        condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

      - bash: |
          echo "##vso[task.setvariable variable=SEMVERSION]$(cat .semversion)"
        workingDirectory: $(workingDirectory)
        displayName: Read version from .semversion file

      - task: Maven@4
        displayName: 'Project compilation with Maven - API'
        inputs:
          mavenPomFile: 'api/client-java/pom.xml'
          goals: install
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          options: >
            $(MAVEN_OPTS)
            -B
            --no-transfer-progress
          sonarQubeRunAnalysis: false
          checkStyleRunAnalysis: false

      - task: Maven@4
        displayName: 'Project compilation with Maven - LIBS'
        inputs:
          mavenPomFile: 'libs-java/pom.xml'
          goals: install
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          options: >
            $(MAVEN_OPTS)
            -B
            --no-transfer-progress
          sonarQubeRunAnalysis: false
          checkStyleRunAnalysis: false

      - task: Maven@4
        displayName: 'Project compilation with Maven - APP'
        inputs:
          mavenPomFile: '$(workingDirectory)/main/pom.xml'
          # install is required to publish locally all modules as the are required in the next satep tp build docker image
          goals: install
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          mavenOptions: $(MAVEN_OPTS)
          options: >
            -B
            --no-transfer-progress
            -Drevision=$(SEMVERSION)
          sonarQubeRunAnalysis: false
          checkStyleRunAnalysis: true # We use checkstyle in coding, so let's use it with Maven as well

      - task: Maven@4
        displayName: Build ÂµService docker image
        inputs:
          mavenPomFile: '$(workingDirectory)/main/pom.xml'
          goals: 'jib:buildTar'
          javaHomeOption: JDKVersion
          jdkVersionOption: 1.17
          mavenOptions: $(MAVEN_OPTS)
          options: >
            -B
            --no-transfer-progress
            -Drevision=$(SEMVERSION)
            -Djib.to.tags=$(dockerTag0)

      - task: Docker@2
        displayName: Push uservice image to docker ACR
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml#build-variables-devops-services
        condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          command: push
          repository: $(imageName)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(dockerTag0)
            $(dockerTag1)

      - script: |
          mkdir -p $(Pipeline.Workspace)/docker
          docker save -o $(Pipeline.Workspace)/docker/cache.tar $(containerRegistryName)/$(imageName):$(dockerTag0)
        displayName: Docker save
        # condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))
        condition: and(not(canceled()), not(failed()))
