resources:
  - repo: self

variables:
  # well-known connection, defined manually.
  # The connection used in pipeline allows to access to ACR sinnet.azurecr.io
  dockerRegistryServiceConnection: "sinnet-acr"
  # name of the registry where the image is hosted on.
  # in Docker world, it is also part of image name (prefix)
  containerRegistry: "sinnetapps.azurecr.io"
  # image name (without tags) used to build final image
  # also root name of the folder in the monorepo
  imageName: uservice-webapi
  # Working directore for the uservice
  workingDirectory: ${{ variables.imageName }}

trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    include:
      # We have to include all folders where source files are located
      - $[variables.workingDirectory]

jobs:
  - job: CI
    displayName: Webapi CI build
    pool:
      vmImage: ubuntu-latest
    variables:
      dockerTag1: $(Build.SourceBranchName)-$(Build.BuildNumber)

    steps:
      - bash: |
          echo "##vso[task.setvariable variable=my_version]$(cat .version)"
        workingDirectory: $(workingDirectory)
        displayName: Read version from .version file

      - task: Maven@3
        displayName: 'Project compilation with Maven'
        inputs:
          mavenPomFile: '$(workingDirectory)/main/pom.xml'
          goals: 'verify'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          # options:
          #  - disable log entries (a lot of entries) related to artifacts downloaded by maven
          options: -B --no-transfer-progress
          sonarQubeRunAnalysis: false
          sqMavenPluginVersionChoice: 'latest' # Required when sonarQubeRunAnalysis == True# Options: latest, pom
          checkStyleRunAnalysis: true # We use checkstyle in coding, so let's use it with Maven as well

      - task: Maven@3
        displayName: Build uService image
        inputs:
          mavenPomFile: '$(workingDirectory)/main/pom.xml'
          goals: 'package'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          options: |
            -Dquarkus.container-image.build=true
            -Dquarkus.container-image.name=$(imageName)
            -Dquarkus.container-image.tag=$(my_version)

      - task: Docker@2
        displayName: Push webapi image to docker ACR
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          command: push
          containerRegistry: $(dockerRegistryServiceConnection)
          repository: $(imageName)
          tags: |
            $(dockerTag1)

