resources:
  - repo: self

variables:
  # well-known connection, defined manually.
  # The connection used in pipeline allows to access to ACR sinnet.azurecr.io
  dockerRegistryServiceConnection: "sinnet-acr"
  # name of the registry where the image is hosted on.
  # in Docker world, it is also part of image name (prefix)
  containerRegistry: "sinnetapps.azurecr.io"
  # image name (without tags) used to build final image
  # also root name of the folder in the monorepo
  imageName: uservice-webapi
  # Working directore for the uservice
  workingDirectory: ${{ variables.imageName }}
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops#maven
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  dockerCacheName: $(Build.DefinitionName)

trigger:
  batch: true
  branches:
    include:
      # - master
      - '*'
  paths:
    include:
      # We have to include all folders where source files are located
      - $[variables.workingDirectory]

jobs:
  - job: CI
    displayName: Webapi CI build
    pool:
      vmImage: ubuntu-latest
    variables:
      dockerTag1: $(Build.SourceBranchName)-$(Build.BuildNumber)

    steps:
      - task: Cache@2
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(MAVEN_CACHE_FOLDER)
        displayName: Cache Maven local repo

      - task: Cache@2
        displayName: Docker cache task
        inputs:
          key: 'docker | "$(Agent.OS)" | "$(dockerCacheName)"'
          path: $(Pipeline.Workspace)/docker
          #Variable to set to 'true' when the cache is restored
          cacheHitVar: CACHE_RESTORED

      - script: |
          docker load -i $(Pipeline.Workspace)/docker/cache.tar
        displayName: Restore Docker cache step 2
        condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

      - bash: |
          echo "##vso[task.setvariable variable=my_version]$(cat .version)"
        workingDirectory: $(workingDirectory)
        displayName: Read version from .version file

      - task: Maven@3
        displayName: 'Project compilation with Maven'
        inputs:
          mavenPomFile: '$(workingDirectory)/main/pom.xml'
          goals: verify
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          options: -B --no-transfer-progress $(MAVEN_OPTS)
          sonarQubeRunAnalysis: false
          checkStyleRunAnalysis: true # We use checkstyle in coding, so let's use it with Maven as well

      - task: Maven@3
        displayName: Build uService image
        inputs:
          mavenPomFile: '$(workingDirectory)/main/pom.xml'
          goals: package
          javaHomeOption: JDKVersion
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          options: -Dquarkus.container-image.build=true -Dquarkus.container-image.group=$(containerRegistry) -Dquarkus.container-image.name=$(imageName) -Dquarkus.container-image.tag=$(dockerTag1)

      - script: |
          mkdir -p $(Pipeline.Workspace)/docker
          docker save -o $(Pipeline.Workspace)/docker/cache.tar $(containerRegistry)/$(imageName):$(dockerTag1)
        displayName: Docker save
        condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))


      - task: Docker@2
        displayName: Push webapi image to docker ACR
        # condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          command: push
          repository: $(containerRegistry)/$(imageName)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(dockerTag1)


      - task: Docker@2
        displayName: Push webapi image to docker ACR
        # condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          command: push
          repository: "sparta0"
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            "sparta1"
            "sparta2"
