resources:
  - repo: self

variables:
  # well-known connection, defined manually.
  # The connection used in pipeline allows to access to ACR sinnet.azurecr.io
  dockerRegistryServiceConnection: "sinnet-acr"
  # name of the registry where the image is hosted on.
  # in Docker world, it is also part of image name (prefix)
  containerRegistryName: "sinnet.azurecr.io"
  # image name (without tags) used to build final image
  # also root name of the folder in the monorepo
  imageName: uservice-webapi
  # Working directore for the uservice
  workingDirectory: ${{ variables.imageName }}

  # https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops#maven
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  dockerCacheName: $(Build.DefinitionName)

trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    include:
      # We have to include all folders where source files are located
      - uservice-webapi
      - uservice-reports/main/src/main/proto
      - webapi/api.grpc

pr:
  branches:
    include:
      - master
  paths:
    include:
      # We have to include all folders where source files are located
      - uservice-webapi
      - uservice-reports/main/src/main/proto
      - webapi/api.grpc

jobs:
  - job: CI
    displayName: Webapi CI build
    pool:
      vmImage: ubuntu-latest
    variables:
      dockerTag0: latest
      dockerTag1: $(Build.SourceBranchName)-$(Build.BuildNumber)

    steps:
      - bash: |
          ./links.sh
          cp -Lr .links .links-COPY && rm -r .links && mv .links-COPY .links
        workingDirectory: uservice-webapi
        displayName: Create local copy of used external resources

      - task: Cache@2
        inputs:
          key: 'maven | "$(Agent.OS)" | $(workingDirectory)/**/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(MAVEN_CACHE_FOLDER)
        displayName: Cache Maven local repo

      - task: Cache@2
        displayName: Docker cache task
        inputs:
          key: 'docker | $(Agent.OS) | "$(dockerCacheName)"'
          path: $(Pipeline.Workspace)/docker
          #Variable to set to 'true' when the cache is restored
          cacheHitVar: CACHE_RESTORED

      - script: |
          docker load -i $(Pipeline.Workspace)/docker/cache.tar
        displayName: Restore Docker cache
        condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

      - bash: |
          echo "##vso[task.setvariable variable=my_version]$(cat .semversion)"
        workingDirectory: $(workingDirectory)
        displayName: Read version from .semversion file

      - task: Maven@3
        displayName: 'Project compilation with Maven'
        inputs:
          mavenPomFile: '$(workingDirectory)/main/pom.xml'
          goals: verify
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          options: >
            $(MAVEN_OPTS)
            -B
            --no-transfer-progress
            -Drevision=$(my_version)
          sonarQubeRunAnalysis: false
          checkStyleRunAnalysis: true # We use checkstyle in coding, so let's use it with Maven as well

      - task: Maven@3
        displayName: Build uService image
        inputs:
          mavenPomFile: '$(workingDirectory)/main/pom.xml'
          goals: package
          javaHomeOption: JDKVersion
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          options: >
            $(MAVEN_OPTS)
            -DskipTests
            -Dquarkus.container-image.build=true
            -Dquarkus.container-image.group=$(containerRegistryName)
            -Dquarkus.container-image.name=$(imageName)
            -Dquarkus.container-image.tag=$(dockerTag1)
            -Dquarkus.container-image.additional-tags=$(dockerTag0)

      - task: Docker@2
        displayName: Push webapi image to docker ACR
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml#build-variables-devops-services
        condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          command: push
          repository: $(imageName)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(dockerTag0)
            $(dockerTag1)

      - script: |
          mkdir -p $(Pipeline.Workspace)/docker
          docker save -o $(Pipeline.Workspace)/docker/cache.tar $(containerRegistryName)/$(imageName):$(dockerTag0)
        displayName: Docker save
        # condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))
        condition: and(not(canceled()), not(failed()))
